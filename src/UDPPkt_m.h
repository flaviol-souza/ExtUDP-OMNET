//
// Generated file, do not edit! Created by nedtool 4.6 from UDPPkt.msg.
//

#ifndef _UDPPKT_M_H_
#define _UDPPKT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "NetPkt_m.h"
// }}

/**
 * Class generated from <tt>UDPPkt.msg:27</tt> by nedtool.
 * <pre>
 * //
 * // Message class for representing a Telnet packet (bytes carried in TCP).
 * // For purposes of this model, we don't care about TCP connection setup
 * // and teardown, about TCP acks, or finite IP packet size.
 * //
 * packet UDPPkt extends NetPkt
 * {
 *     string payload;
 * }
 * </pre>
 */
class UDPPkt : public ::NetPkt
{
  protected:
    opp_string payload_var;

  private:
    void copy(const UDPPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPPkt&);

  public:
    UDPPkt(const char *name=NULL, int kind=0);
    UDPPkt(const UDPPkt& other);
    virtual ~UDPPkt();
    UDPPkt& operator=(const UDPPkt& other);
    virtual UDPPkt *dup() const {return new UDPPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
};

inline void doPacking(cCommBuffer *b, UDPPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPPkt& obj) {obj.parsimUnpack(b);}


#endif // ifndef _UDPPKT_M_H_

